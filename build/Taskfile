#!/usr/bin/env bash
# b5 Taskfile, see https://git.team23.de/build/b5 for details

##########################################
# General commands
##########################################

task:run() {
    # assure that docker can connect to the local X11-server
    xhost +local:docker
    docker:compose up "$@"
}

task:restart() {
    container="$1"
    docker:compose restart "${container:-agent}"
}

task:halt() {
    docker:compose down "$@"
}

task:shell() {
    container="$1"
    command="$2"
    additionalArguments="${@:3}"
    docker:container_run "${container:-agent}" "${command:-/bin/bash}" ${additionalArguments:-}
}

##########################################
# Project setup / maintenance
##########################################
task:install() {
    task:install:git_hooks
    #task:gitconfig:copy
    install:gpu-support
    docker:install
}

install:gpu-support() {
    # check if docker-nvidia is installed, to make the project also executable on
    # systems without nvidia GPU.

    if [ -z "$(command -v docker-nvidia)" ]
    then
      task:nvidia:enable
    else
      RED='\033[0;31m'
      NC='\033[0m'
      echo -e "${RED}######################################################################################${NC}"
      echo -e "${RED}WARNING: NVIDIA Container Toolkit not installed. The project won't run as expected!${NC}"
      echo -e "${RED}#####################################################################################${NC}"
    fi
}

task:update() {
    docker:update
}

task:nvidia:enable() {
    # Writes the content of templates/config.nvidia.yml.jinja2 to config.local.yml
    # This file tells b5 to read docker-compose.nvidia.yml in addition to docker-compose.yml
    template:render --overwrite ask-if-older templates/config.nvidia.yml.jinja2 config.local.yml
}

##########################################
# Project linting
##########################################

task:lint() {
  b5 python:lint
  b5 markdown:lint
}

task:python:lint() {
  docker:container_run -T flake8 code
}

task:markdown:lint() {
  docker:container_run -T mdlint markdownlint .
}

task:markdown:fix() {
  docker:container_run -T mdlint markdownlint --fix .
}

task:comlipy() {
    docker:container_run -T comlipy -c /apps/build/config-comlipy.yml "$@"
}

task:install:git_hooks() {
    test -L ../.git/hooks/pre-commit || ln -s ../../build/hooks/pre-commit ../.git/hooks/
    test -L ../.git/hooks/commit-msg || ln -s ../../build/hooks/commit-msg ../.git/hooks/
    chmod +x ./hooks/*
}

task:gitconfig:copy() {
  cp -u ~/.gitconfig ../.gitconfig
}

source ./tasks/ros.sh
